<?php
/**
 * Controlador Grupo
 * 
 * @package    CIUM API
 * @subpackage Controlador
 * @author     Eliecer Ramirez Esquinca
 * @created    2015-07-20
 */
namespace App\Http\Controllers\v1\Sistema;

use App\Http\Requests;
use App\Http\Controllers\Controller;

use Request;
use Response;
use Input;
use DB; 
use App\Models\Sistema\grupo;
use App\Http\Requests\GrupoRequest;


class GrupoController extends Controller {

	/**
	 * Muestra una lista de los recurso.
	 *
	 * @param  
	 *		 get en la url ejemplo url?pagina=1&limite=5&order=id
	 *			pagina = numero del puntero(offset) para la sentencia limit
	 *		    limite = numero de filas a mostrar
	 *			order  = campo de la base de datos por la que se debe ordenar. Defaul ASC si se antepone el signo - es de manera DESC
	 *					 ejemplo url?pagina=1&limite=5&order=id ASC y url?pagina=1&limite=5&order=-id DESC
	 *		    columna= nombre del campo para hacer busqueda
	 *          valor  = valor con el que se buscara en el campo
	 * Los parametros son opcionales, pero si existe pagina debe de existir tambien limite y/o si existe columna debe existir tambien valor y pagina - limite
	 * @return Response
	 */
	public function index()
	{
		$datos = Request::all();
		
		// Si existe el paarametro pagina en la url devolver las filas según sea el caso
		// si no existe parametros en la url devolver todos las filas de la tabla correspondiente
		// esta opción es para devolver todos los datos cuando la tabla es de tipo catálogo
		if(array_key_exists('pagina',$datos))
		{
			$pagina=$datos['pagina'];
			if(isset($datos['order']))
			{
				$order = $datos['order'];
				if(strpos(" ".$order,"-"))
					$orden="desc";
				else
					$orden="asc";
				$order=str_replace("-","",$order); 
			}
			else{
				$order="name"; $orden="asc";
			}
			
			if($pagina == 0)
			{
				$pagina = 1;
			}
			// si existe buscar se realiza esta linea para devolver las filas que en el campo que coincidan con el valor que el usuario escribio
			// si no existe buscar devolver las filas con el limite y la pagina correspondiente a la paginación
			if(array_key_exists('buscar',$datos))
			{
				$columna = $datos['columna'];
				$valor   = $datos['valor'];
				$grupo = Grupo::orderBy($order,$orden);
				
				$search = trim($valor);
				$keyword = $search;
				$grupo=$grupo->whereNested(function($query) use ($keyword)
				{
					
						$query->Where('name', 'LIKE', '%'.$keyword.'%'); 
				});
				$total=$grupo->get();
				$grupo = $grupo->skip($pagina-1)->take($datos['limite'])->get();
			}
			else
			{
				$grupo = Grupo::skip($pagina-1)->take($datos['limite'])->orderBy($order,$orden)->get();
				$total=Grupo::all();
			}
			
		}
		else
		{
			$grupo = Grupo::all();
			$total=$grupo;
		}

		if(!$grupo)
		{
			return Response::json(array('status'=> 404,"messages"=>'No encontrado'), 200);
		} 
		else 
		{
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$grupo,"total"=>count($total)),200);
			
		}
	}

	/**
	 * Guarde un recurso recién creado en el almacenamiento.
	 *
	 * @param post type json de los recursos a almacenar en la tabla correspondiente
	 * Response si la operacion es exitosa devolver el registro y estado 201 si no devolver error y estado 500
	 * @return Response
	 */
	public function store()
	{
		$rules = [
			'name' => 'required|min:3|max:250',
			'permissions'=> 'required'
		];
		$v = \Validator::make(Request::json()->all(), $rules );

		if ($v->fails())
		{
			return Response::json($v->errors());
		}
		$datos = Input::json();
		$success = false;
		
        DB::beginTransaction();
        try 
		{
            $grupo = new Grupo;
            $grupo->name = $datos->get('name');
			$grupo->permissions = $datos->get('permissions')?$datos->get('permissions'):array();

            if ($grupo->save()) 
                $success = true;
        } 
		catch (\Exception $e) 
		{
			throw $e;
        }
        if ($success) 
		{
            DB::commit();
			return Response::json(array("status"=>201,"messages"=>"Creado","data"=>$grupo),201);
        } 
		else 
		{
            DB::rollback();
			return Response::json(array("status"=>500,"messages"=>"Error interno del servidor"),500);
        }
		
	}

	/**
	 * Visualizar el recurso especificado.
	 *
	 * @param  int  $id que corresponde al recurso a mostrar el detalle
	 * Response si el recurso es encontrado devolver el registro y estado 200, si no devolver error con estado 404
	 * @return Response
	 */
	public function show($id)
	{
		$grupo = Grupo::find($id);
		
		if(!$grupo)
		{
			return Response::json(array('status'=> 404,"messages"=>'No encontrado'), 200);
		} 
		else 
		{
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$grupo),200);
		}
	}


	/**
	 * Actualizar el recurso especificado en el almacenamiento.
	 *
	 * @param  int  $id que corresponde al recurso a actualizar json $request valores a actualizar segun el recurso
	 * Response si el recurso es encontrado y actualizado devolver el registro y estado 200, si no devolver error con estado 304
	 * @return Response
	 */
	public function update($id)
	{
		$rules = [
			'name' => 'required|min:3|max:250',
			'permissions'=> 'required'
		];
		$v = \Validator::make(Request::json()->all(), $rules );

		if ($v->fails())
		{
			return Response::json($v->errors());
		}
		$datos = Input::json();
		
		$success = false;
        DB::beginTransaction();
        try 
		{
			$grupo = Grupo::find($id);
			$borrado = DB::table('/sisGrupo')					
			->where('id',$id)
			->update(['permissions' => NULL]);
			
			$grupo->name = $datos->get('name');
			$grupo->permissions = $datos->get('permissions')?$datos->get('permissions'):array();

            if ($grupo->save()) 
                $success = true;
		} 
		catch (\Exception $e) 
		{
			throw $e;
        }
        if ($success)
		{
			DB::commit();
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$grupo),200);
		} 
		else 
		{
			DB::rollback();
			return Response::json(array('status'=> 304,"messages"=>'No modificado'),304);
		}
	}

	/**
	 * Elimine el recurso especificado del almacenamiento (softdelete).
	 *
	 * @param  int  $id que corresponde al recurso a eliminar
	 * Response si el recurso es eliminado devolver el registro y estado 200, si no devolver error con estado 500 
	 * @return Response
	 */
	public function destroy($id)
	{
		$success = false;
        DB::beginTransaction();
        try 
		{
			$grupo = Grupo::find($id);
			$grupo->delete();
			$success=true;
		} 
		catch (\Exception $e) 
		{
			throw $e;
        }
        if ($success)
		{
			DB::commit();
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$grupo),200);
		} 
		else 
		{
			DB::rollback();
			return Response::json(array('status'=> 500,"messages"=>'Error interno del servidor'),500);
		}
	}
}
