<?php
/**
 * Controlador EvaluacionRecurso criterio (Recurso)
 * 
 * @package    CIUM API
 * @subpackage Controlador
 * @author     Eliecer Ramirez Esquinca
 * @created    2015-07-20
 */
namespace App\Http\Controllers\v1\Transacciones;

use App\Http\Requests;
use App\Http\Controllers\Controller;

use Response;
use Input;
use DB;
use Sentry;
use Request;

use App\Models\Catalogos\IndicadorAlerta;
use App\Models\Catalogos\IndicadorCriterio;
use App\Models\Catalogos\ConeIndicadorCriterio;
use App\Models\Catalogos\LugarVerificacion;

use App\Models\Transacciones\EvaluacionRecurso;
use App\Models\Transacciones\EvaluacionRecursoCriterio;
use App\Models\Transacciones\Hallazgo;

use App\Models\Transacciones\Seguimiento;
use App\Models\Catalogos\Accion;

class EvaluacionRecursoCriterioController extends Controller 
{	
    /**
	 * Muestra una lista de los recurso.
	 *
	 * @param  
	 *		 get en la url ejemplo url?pagina=1&limite=5&order=id
	 *			pagina = numero del puntero(offset) para la sentencia limit
	 *		    limite = numero de filas a mostrar
	 *			order  = campo de la base de datos por la que se debe ordenar. Defaul ASC si se antepone el signo - es de manera DESC
	 *					 ejemplo url?pagina=1&limite=5&order=id ASC y url?pagina=1&limite=5&order=-id DESC
	 *		    columna= nombre del campo para hacer busqueda
	 *          valor  = valor con el que se buscara en el campo
	 * Los parametros son opcionales, pero si existe pagina debe de existir tambien limite y/o si existe columna debe existir tambien valor y pagina - limite
	 * @return Response
	 */
	public function index()
	{
		$datos = Request::all();
		
		// Si existe el paarametro pagina en la url devolver las filas según sea el caso
		// si no existe parametros en la url devolver todos las filas de la tabla correspondiente
		// esta opción es para devolver todos los datos cuando la tabla es de tipo catálogo
		if(array_key_exists('pagina',$datos))
		{
			$pagina=$datos['pagina'];
			if(isset($datos['order']))
			{
				$order = $datos['order'];
				if(strpos(" ".$order,"-"))
					$orden="desc";
				else
					$orden="asc";
				$order=str_replace("-","",$order); 
			}
			else{
				$order="id"; $orden="asc";
			}
			
			if($pagina == 0)
			{
				$pagina = 1;
			}
			// si existe buscar se realiza esta linea para devolver las filas que en el campo que coincidan con el valor que el usuario escribio
			// si no existe buscar devolver las filas con el limite y la pagina correspondiente a la paginación
			if(array_key_exists('buscar',$datos))
			{
				$columna = $datos['columna'];
				$valor   = $datos['valor'];
				$evaluacionCriterio = EvaluacionRecursoCriterio::orderBy($order,$orden);
				
				$search = trim($valor);
				$keyword = $search;
				$evaluacionCriterio=$evaluacionCriterio->whereNested(function($query) use ($keyword)
				{
					
						$query->Where('idEvaluacionRecurso', 'LIKE', '%'.$keyword.'%')
							 ->orWhere('idCriterio', 'LIKE', '%'.$keyword.'%')
							 ->orWhere('idIndicador', 'LIKE', '%'.$keyword.'%'); 
				});
				$total=$evaluacionCriterio->get();
				$evaluacionCriterio = $evaluacionCriterio->skip($pagina-1)->take($datos['limite'])->get();
			}
			else
			{
				$evaluacionCriterio = EvaluacionRecursoCriterio::skip($pagina-1)->take($datos['limite'])->orderBy($order,$orden)->get();
				$total=EvaluacionRecursoCriterio::get();
			}
			
		}
		else
		{
			$evaluacionCriterio = EvaluacionRecursoCriterio::get();
			$total=$evaluacionCriterio;
		}

		if(!$evaluacionCriterio)
		{
			return Response::json(array('status'=> 404,"messages"=>'No encontrado'), 200);
		} 
		else 
		{
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$evaluacionCriterio,"total"=>count($total)),200);
			
		}
	}

	/**
	 * Guarde un recurso recién creado en el almacenamiento.
	 *
	 * @param post type json de los recursos a almacenar en la tabla correspondiente
	 * Response si la operacion es exitosa devolver el registro y estado 201 si no devolver error y estado 500
	 * @return Response
	 */
	public function store()
	{
		$datos = Input::json(); 
		$success = false;
		$date=new \DateTime;
		
        DB::beginTransaction();
        try 
		{
			$usuario = Sentry::getUser();			
			$evaluacionCriterio = EvaluacionRecursoCriterio::where('idEvaluacionRecurso',$datos->get('idEvaluacionRecurso'))->where('idCriterio',$datos->get('idCriterio'))->first();
				
			if(!$evaluacionCriterio)
				$evaluacionCriterio = new EvaluacionRecursoCriterio;
			
            $evaluacionCriterio->idEvaluacionRecurso= $datos->get('idEvaluacionRecurso');
			$evaluacionCriterio->idCriterio = $datos->get('idCriterio');
			$evaluacionCriterio->idIndicador = $datos->get('idIndicador');
			$evaluacionCriterio->aprobado = $datos->get('aprobado');
			
            if ($evaluacionCriterio->save()) 
			{				
				$success = true;
			}                
        } 
		catch (\Exception $e) 
		{
			throw $e;
        }
        if ($success) 
		{
            DB::commit();
			return Response::json(array("status"=>201,"messages"=>"Creado","data"=>$evaluacionCriterio),201);
        } 
		else 
		{
            DB::rollback();
			return Response::json(array("status"=>500,"messages"=>"Error interno del servidor"),500);
        }
	}

	/**
	 * Visualizar el recurso especificado.
	 *
	 * @param  int  $evaluacion que corresponde al recurso a mostrar el detalle
	 * Response si el recurso es encontrado devolver el registro y estado 200, si no devolver error con estado 404
	 * @return Response
	 */
	public function show($evaluacion)
	{
		$evaluacionCriterio = EvaluacionRecursoCriterio::with('Evaluaciones')->where('idEvaluacionRecurso',$evaluacion)->get();
		$evaluacionC = DB::table('EvaluacionRecurso AS e')
			->leftJoin('Clues AS c', 'c.clues', '=', 'e.clues')
			->leftJoin('ConeClues AS cc', 'cc.clues', '=', 'e.clues')
			->leftJoin('Cone AS co', 'co.id', '=', 'cc.idCone')
            ->select(array('e.fechaEvaluacion', 'e.cerrado', 'e.id','e.clues', 'c.nombre', 'c.domicilio', 'c.codigoPostal', 'c.entidad', 'c.municipio', 'c.localidad', 'c.jurisdiccion', 'c.institucion', 'c.tipoUnidad', 'c.estatus', 'c.estado', 'c.tipologia','co.nombre as nivelCone', 'cc.idCone'))
            ->where('e.id',"$evaluacion")
			->where('e.borradoAl',null)
			->first();
			
		$cone = $evaluacionC->idCone;
		$aprobado=array();
		$noAplica=array();
		$noAprobado=array();
		
		$hallazgo=array();
		$criterio = [];
		$indicadores = [];
		foreach($evaluacionCriterio as $valor)
		{
			$indicador = DB::select("SELECT idIndicador FROM IndicadorCriterio ic 
			left join ConeIndicadorCriterio cic on cic.idCone = '$cone'
			where ic.idCriterio = '$valor->idCriterio' and idIndicador = '$valor->idIndicador' and ic.borradoAl is null and cic.borradoAl is null order by idIndicador");
			$indicador = $indicador[0]->idIndicador;
			
			$result = DB::select("SELECT i.codigo, i.nombre,c.id as idCriterio, ic.idIndicador, cic.idCone, lv.id as idlugarVerificacion, c.creadoAl, c.modificadoAl, c.nombre as criterio, lv.nombre as lugarVerificacion FROM ConeIndicadorCriterio cic							
			left join IndicadorCriterio ic on ic.id = cic.idIndicadorCriterio
			left join Criterio c on c.id = ic.idCriterio
			left join Indicador i on i.id = ic.idIndicador
			left join LugarVerificacion lv on lv.id = ic.idlugarVerificacion		
			WHERE cic.idCone = $cone and ic.idIndicador = $indicador and c.id = $valor->idCriterio
			and c.borradoAl is null and ic.borradoAl is null and cic.borradoAl is null and lv.borradoAl is null
			order by i.codigo");						
			
			$resultH = DB::select("SELECT h.idIndicador, h.idAccion, h.idPlazoAccion, h.resuelto, h.descripcion, a.tipo FROM Hallazgo h	
			left join Accion a on a.id = h.idAccion WHERE h.idEvaluacion= $evaluacion and categoriaEvaluacion='RECURSO' and idIndicador='$indicador' and h.borradoAl is null");
				
			if($resultH)
			{
				$hallazgo[$result[0]->codigo] = $resultH[0];
			}
			
			if($valor->aprobado == '1')
			{
				array_push($aprobado,$valor->idCriterio);
			}
			else if($valor->aprobado == '2')
			{
				array_push($noAplica,$valor->idCriterio);
			}
			else
			{
				array_push($noAprobado,$valor->idCriterio);								
			}
			$result[0]->aprobado=$valor->aprobado;
			array_push($criterio,$result[0]);				
		}
		
		foreach($criterio as $item)
		{
			if(!array_key_exists($item->codigo,$indicadores))
			{
				$id = $item->idIndicador;
				
				$total = DB::select("SELECT c.id,c.nombre  FROM ConeIndicadorCriterio cic							
						left join IndicadorCriterio ic on ic.id = cic.idIndicadorCriterio
						left join Criterio c on c.id = ic.idCriterio
						left join Indicador i on i.id = ic.idIndicador
						left join LugarVerificacion lv on lv.id = ic.idlugarVerificacion		
						WHERE cic.idCone = $cone and ic.idIndicador = '$id' 
						and c.borradoAl is null and ic.borradoAl is null and cic.borradoAl is null and lv.borradoAl is null order by i.codigo");
						
				$in=[];
				foreach($total as $c)
				{
					$in[]=$c->id;
				}
				
				$aprobado = DB::table('EvaluacionRecursoCriterio')->select('idCriterio')
							->whereIN('idCriterio',$in)
							->where('idEvaluacionRecurso',$evaluacion)
							->where('idIndicador',$id)
							->where('borradoAl',null)->where('aprobado',1)->get();				
				$na = DB::table('EvaluacionRecursoCriterio')
							->select('idCriterio')
							->whereIN('idCriterio',$in)
							->where('idEvaluacionRecurso',$evaluacion)
							->where('aprobado',2)
							->where('borradoAl',null)->get();				
				
				$totalPorciento = number_format((count($aprobado)/(count($total)-count($na)))*100, 2, '.', '');
				
				$item->indicadores["totalCriterios"] = count($total)-count($na);
				$item->indicadores["totalAprobados"] = count($aprobado);
				$item->indicadores["totalPorciento"] = $totalPorciento;
				$micolor=DB::select("SELECT a.color FROM IndicadorAlerta ia 
									   left join Alerta a on a.id=ia.idAlerta
									   where ia.idIndicador = $id  and $totalPorciento between ia.minimo and ia.maximo");
				if($micolor)
					$micolor=$micolor[0]->color;
				else
					$micolor="hsla(125, 5%, 73%, 0.62)";
				$item->indicadores["totalColor"] = $micolor;
				
				$indicadores[$item->codigo] = $item;				
			}				
		}
		$criterio["noAplica"] = $noAplica;
		$criterio["aprobado"] = $aprobado;
		$criterio["noAprobado"] = $noAprobado;
		
		$criterio["indicadores"] = $indicadores;
		
		if(!$criterio)
		{
			return Response::json(array('status'=> 200,"messages"=>'ok', "data"=> []),200);
		} 
		else 
		{
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$criterio, "hallazgos"=>$hallazgo),200);			
		}
	}
	
	/**
	 * Elimine el recurso especificado del almacenamiento (softdelete).
	 *
	 * @param  int  $id que corresponde al recurso a eliminar
	 * Response si el recurso es eliminado devolver el registro y estado 200, si no devolver error con estado 500 
	 * @return Response
	 */
	public function destroy($id)
	{
		$datos = Request::all(); 
		$success = false;
        DB::beginTransaction();
        try 
		{
			$cerrado = $evaluacion = EvaluacionRecurso::where("id",$id)->where("cerrado","!=",1)->first();
			if($cerrado)
			{
				$evaluacion = EvaluacionRecursoCriterio::where("idEvaluacionRecurso",$id)->where("idIndicador",$datos["idIndicador"])->get();
				foreach($evaluacion as $item)
				{
					$criterio = EvaluacionRecursoCriterio::find($item->id);
					$criterio->delete();
				}
				$hallazgo = Hallazgo::where("idEvaluacion",$id)->where("categoriaEvaluacion","RECURSO")->where("idIndicador",$datos["idIndicador"])->get();
				foreach($hallazgo as $item)
				{
					$ha = Hallazgo::find($item->id);
					$ha->delete();
				}
				
				$success=true;
			}
			else{
				return Response::json(array('status'=> 304,"messages"=>'No se puede borrar ya fue cerrado'),304);
			}
		} 
		catch (\Exception $e) 
		{
			throw $e;
        }
        if ($success)
		{
			DB::commit();
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$evaluacion),200);
		} 
		else 
		{
			DB::rollback();
			return Response::json(array('status'=> 500,"messages"=>'Error interno del servidor'),500);
		}
	}
	
	/**
	 * Muestra una lista de los recurso.
	 *
	 * @param  
	 *		 get 
	 *			cone = nivel de cone de la evaluación
	 *		    indicador = id del indicador a mostra sus criterios
	 *			evaluacion  = id de la evaluación
	 *					
	 * @return Response
	 */
	public function CriterioEvaluacion($cone,$indicador,$evaluacion)
	{		
		$datos = Request::all();
		
		
		$criterio = DB::select("SELECT c.id as idCriterio, ic.idIndicador, cic.idCone, lv.id as idlugarVerificacion, c.creadoAl, c.modificadoAl, c.nombre as criterio, lv.nombre as lugarVerificacion FROM ConeIndicadorCriterio cic							
		left join IndicadorCriterio ic on ic.id = cic.idIndicadorCriterio
		left join Criterio c on c.id = ic.idCriterio
		left join LugarVerificacion lv on lv.id = ic.idlugarVerificacion		
		WHERE cic.idCone = $cone and ic.idIndicador = $indicador and c.borradoAl is null and ic.borradoAl is null and cic.borradoAl is null and lv.borradoAl is null");	
			
		$evaluacionCriterio = EvaluacionRecursoCriterio::where('idEvaluacionRecurso',$evaluacion)->where('idIndicador',$indicador)->get();
		$aprobado=array();
		$noAplica=array();
		$noAprobado=array();
		
		$hallazgo=array();
		foreach($evaluacionCriterio as $valor)
		{
			if($valor->aprobado == '1')
			{
				array_push($aprobado,$valor->idCriterio);
			}
			else if($valor->aprobado == '2')
			{
				array_push($noAplica,$valor->idCriterio);
			}
			else
			{	
				array_push($noAprobado,$valor->idCriterio);				
			}
		}
		$criterio["noAplica"] = $noAplica;
		$criterio["aprobado"] = $aprobado;
		$criterio["noAprobado"] = $noAprobado;
		
		
		if(!$criterio)
		{
			return Response::json(array('status'=> 404,"messages"=>'No encontrado'),200);
		} 
		else 
		{
			$result = DB::select("SELECT h.idIndicador, h.idAccion, h.idPlazoAccion, h.resuelto, h.descripcion, a.tipo FROM Hallazgo h	
			left join Accion a on a.id = h.idAccion WHERE h.idEvaluacion= $evaluacion and categoriaEvaluacion='RECURSO' and idIndicador='$indicador' and h.borradoAl is null");
				
			if($result)
			{
				$hallazgo = $result[0];
			}
			else $hallazgo=0;
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$criterio,"total"=>count($criterio), "hallazgo" => $hallazgo),200);
			
		}
	}
	
	/**
	 * Muestra una lista de los recurso.
	 *
	 * @param $evaluacion 
	 * @return Response
	 */
	public function Estadistica($evaluacion)
	{		
		$clues = EvaluacionRecurso::find($evaluacion)->first()->clues;
		$evaluacionCriterio = EvaluacionRecursoCriterio::with('Evaluaciones')->where('idEvaluacionRecurso',$evaluacion)->get(array('idCriterio','aprobado','id','idIndicador'));
		
		$indicador = [];
		$existe=false;
		foreach($evaluacionCriterio as $item)
		{
			$sql = "SELECT distinct i.id, i.codigo, i.nombre, (SELECT count(id) FROM ConeIndicadorCriterio where borradoAl is null and 
			idIndicadorCriterio in(select id from IndicadorCriterio where idIndicador=ci.idIndicador and borradoAl is null and idCriterio in (SELECT id FROM Criterio where borradoAl is null)) and idCone=cc.idCone) as total 
			FROM ConeClues cc 
			left join ConeIndicadorCriterio cic on cic.idCone = cc.idCone
			left join IndicadorCriterio ci on ci.id = cic.idIndicadorCriterio 
            left join Indicador i on i.id = ci.idIndicador
            where cc.clues = '$clues' and ci.idCriterio = $item->idCriterio and ci.idIndicador = $item->idIndicador and i.id is not null 
			and i.borradoAl is null and ci.borradoAl is null and cic.borradoAl is null ";
			
			$result = DB::select($sql);
			
			if($result)
			{
				$result = (array)$result[0];
				$existe = false; $contador=0;
				for($i=0;$i<count($indicador);$i++)
				{
					if(array_key_exists($result["codigo"],$indicador[$i]))
					{						
						$indicador[$i][$result["codigo"]]=$indicador[$i][$result["codigo"]]+1;						
						$existe = true;
					}
				}
				if(!$existe)
				{
					$contador=1;
					
					$result[$result["codigo"]] = $contador;
					array_push($indicador,$result);
				}
			}
			
		}
		
		if(!$indicador)
		{
			return Response::json(array('status'=> 200,"messages"=>'ok', "data"=> []),200);
		} 
		else 
		{
			return Response::json(array("status"=>200,"messages"=>"ok","data"=>$indicador),200);			
		}
	}
}
?>
